name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - test
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

jobs:

  # 1️⃣ Terraform - Infraestructura
  deploy-infra:
    name: Terraform & EKS Infra
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Select TF var-file by branch
        run: |
          if [ "${{ github.ref }}" == "refs/heads/dev" ]; then echo "TFVARS=dev.tfvars" >> $GITHUB_ENV; fi
          if [ "${{ github.ref }}" == "refs/heads/test" ]; then echo "TFVARS=test.tfvars" >> $GITHUB_ENV; fi
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then echo "TFVARS=prod.tfvars" >> $GITHUB_ENV; fi

      - name: Terraform Init
        run: terraform init
        working-directory: .infra/terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan -var-file=${{ env.TFVARS }}
        working-directory: .infra/terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: .infra/terraform

  # 2️⃣ Docker - Build y push a ECR
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: deploy-infra

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Export ECR_REGISTRY
        run: |
          echo "ECR_REGISTRY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.${AWS_REGION}.amazonaws.com" >> $GITHUB_ENV
      
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push vote image
        run: |
          docker build -t $ECR_REGISTRY/vote ./.app/vote
          docker push $ECR_REGISTRY/vote

      - name: Build and push result image
        run: |
          docker build -t $ECR_REGISTRY/result ./.app/result
          docker push $ECR_REGISTRY/result

      - name: Build and push worker image
        run: |
          docker build -t $ECR_REGISTRY/worker ./.app/worker
          docker push $ECR_REGISTRY/worker

  # 3️⃣ Kubernetes - Despliegue con kubectl
  deploy-k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [deploy-infra, build-and-push]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      - name: Cargar nombre de cluster desde TFVARS
        run: |
          EKS_NAME=$(grep '^cluster_name' .infra/terraform/${TFVARS} | awk -F '"' '{print $2}')
          echo "EKS_CLUSTER_NAME=$EKS_NAME" >> $GITHUB_ENV

      - name: Verificar nombre del cluster cargado
        run: echo "Cluster name: $EKS_CLUSTER_NAME"

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --name ${{ env.EKS_CLUSTER_NAME }} \
            --region ${{ env.AWS_REGION }}

      - name: Deploy Kubernetes Manifests
        run: |
          kubectl apply -f .infra/k8s-specifications/
