name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - test
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

jobs:
  deploy-infra:
    name: Terraform & EKS Infra
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Seleccionar archivo TFVARS por rama
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then echo "TFVARS=dev.tfvars" >> $GITHUB_ENV; fi
          if [[ "${{ github.ref }}" == "refs/heads/test" ]]; then echo "TFVARS=test.tfvars" >> $GITHUB_ENV; fi
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then echo "TFVARS=prod.tfvars" >> $GITHUB_ENV; fi

      - name: Terraform Init
        run: terraform init
        working-directory: .infra/terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan -var-file=${{ env.TFVARS }}
        working-directory: .infra/terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: .infra/terraform

  test-ci:
    name: Test & Quality Gates
    runs-on: ubuntu-latest
    needs: deploy-infra

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK for SonarCloud
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar

      - name: Install SonarCloud Scanner
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip -d $HOME
          echo "$HOME/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Run SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=Santyrpdv_devOps \
            -Dsonar.organization=santyrpdv \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.sources=. \
            -Dsonar.projectVersion=1.0

      - name: Install Trivy
        run: |
          TRIVY_VERSION=$(curl -s https://api.github.com/repos/aquasecurity/trivy/releases/latest | grep tag_name | cut -d '"' -f4)
          wget https://github.com/aquasecurity/trivy/releases/download/${TRIVY_VERSION}/trivy_${TRIVY_VERSION#v}_Linux-64bit.deb
          sudo dpkg -i trivy_${TRIVY_VERSION#v}_Linux-64bit.deb

      - name: Docker Build (Vote)
        run: docker build -t vote-app-test .app/vote

      - name: Trivy Scan
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            trivy image --exit-code 1 --severity HIGH,CRITICAL vote-app-test
          else
            trivy image --exit-code 0 --severity HIGH,CRITICAL vote-app-test
          fi

  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: test-ci


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Export ECR_REGISTRY
        run: |
          echo "ECR_REGISTRY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.${AWS_REGION}.amazonaws.com" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push vote image
        run: |
          docker build -t $ECR_REGISTRY/vote ./.app/vote
          docker push $ECR_REGISTRY/vote

      - name: Build and push result image
        run: |
          docker build -t $ECR_REGISTRY/result ./.app/result
          docker push $ECR_REGISTRY/result

      - name: Build and push worker image
        run: |
          docker build -t $ECR_REGISTRY/worker ./.app/worker
          docker push $ECR_REGISTRY/worker

  # ecr-cleanup:
  #     name: Trigger ECR Cleanup Lambda
  #     runs-on: ubuntu-latest
  #     needs: build-and-push  

  #     steps:
  #       - name: Configure AWS credentials
  #         uses: aws-actions/configure-aws-credentials@v2
  #         with:
  #           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #           aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
  #           aws-region: ${{ env.AWS_REGION }}

  #       - name: Invoke Lambda to clean old ECR images
  #         run: |
  #           aws lambda invoke \
  #             --function-name ecr-cleanup \
  #             --invocation-type Event \
  #             --region $AWS_REGION \
  #             out.json

  approve-prod:
      name: Manual Approval
      runs-on: ubuntu-latest
      needs: build-and-push
      #if: github.ref == 'refs/heads/main'
      steps:
        - name: Esperar aprobación
          uses: trstringer/manual-approval@v1
          with:
            secret: ${{ secrets.GITHUB_TOKEN }}
            approvers: santiago
            minimum-approvals: 1
            issue-title: "Aprobación requerida para producción"

  deploy-k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [deploy-infra, build-and-push, approve-prod]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Seleccionar archivo TFVARS por rama
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then echo "TFVARS=dev.tfvars" >> $GITHUB_ENV; fi
          if [[ "${{ github.ref }}" == "refs/heads/test" ]]; then echo "TFVARS=test.tfvars" >> $GITHUB_ENV; fi
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then echo "TFVARS=prod.tfvars" >> $GITHUB_ENV; fi

      - name: Cargar nombre de cluster desde TFVARS
        run: |
          EKS_NAME=$(grep '^cluster_name' .infra/terraform/${TFVARS} | awk -F '"' '{print $2}')
          echo "EKS_CLUSTER_NAME=$EKS_NAME" >> $GITHUB_ENV

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --name $EKS_CLUSTER_NAME \
            --region $AWS_REGION

      - name: Deploy Kubernetes Manifests
        run: |
          kubectl apply -f .infra/k8s-specifications/
